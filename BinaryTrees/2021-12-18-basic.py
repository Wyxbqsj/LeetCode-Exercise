'''
与图论中的“度”不同，树的度是如下定义的：有根树T中，结点x的子女数目称为x的度。也就是：在树中，结点有几个分叉，度就是几。

二叉树的三个基本性质：
1. 第i层最多有2**(i-1)个结点
2. 深度为k的二叉树至多有2**k-1个结点
3. 二叉树中，叶子结点个数为n_0, 度为2的结点的数为n_2, 则n_0=n_2+1
4. 具有 n 个节点的满二叉树的深度为 log2(n+1)
5. n 个结点的完全二叉树的深度为 ⌊log2n⌋+1

!!! 如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布，则此二叉树被称为完全二叉树。
'''

# 二叉树的顺序存储结构：使用数组存储二叉树，只适用于完全二叉树
# 如果我们想顺序存储普通二叉树，需要提前将普通二叉树转化为完全二叉树,只需加入一些dummy node将普通的二叉树补全即可
'''
从顺序表中还原完全二叉树也很简单。
我们知道，完全二叉树具有这样的性质，将树中节点按照层次并从左到右依次标号（1,2,3,...），
若节点 i 有左右孩子，则其左孩子节点为 2*i，右孩子节点为 2*i+1。
'''

# 二叉树的链式存储结构：采用链式存储二叉树时，其节点结构由 3 部分构成：
# 指向左孩子节点的指针（Lchild）；
# 节点存储的数据（data）；
# 指向右孩子节点的指针（Rchild）；
class TreeNode:
    def __init__(self,val,left=None,right=None) -> None:
        self.val=val
        self.left=left
        self.right=right
    