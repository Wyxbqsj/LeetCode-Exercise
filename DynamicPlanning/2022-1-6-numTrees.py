'''
解题思路：设n个结点所组成的二叉搜索树的个数为G(n),F(i)是以i为根节点的二叉搜索树的个数
则G(n)=F(1)+F(2)+...+F(n)
(1) 当i=1时,1-n中没有比1更小的数，则左子树结点个数为0，右子树结点个数为n-1
(2) 当i=n时,1-n中没有比n更大的数，则左子树结点个数为n-1，右子树结点个数为0
(3) 当i是1-n中的某个数，则左子树结点个数为i-1，右子树结点个数为n-i
因此对应于上述三种情况：
F(1)=G(0)*G(n-1)
F(n)=G(n-1)*G(0)
F(i)=G(i-1)*G(n-i)

故：G(n)=G(0)*G(n-1)+...+G(i-1)*G(n-i)+...+G(n-1)*G(0)
'''

class Solution:
    def numTrees(self, n: int) -> int:
        G=[0]*(n+1) # 初始化dp表
        G[0]=0 # 0个结点组成0个二叉树
        G[1]=1 # 1个结点组成1个二叉树
        
        for i in range(2,n+1):
            for j in range(1,i+1):
                G[i]+=G[j-i]*G[i-j]
        return G[n]